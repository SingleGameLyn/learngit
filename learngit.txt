一、Git简介
	1.安装Git
		1.1在Linux上安装Git
			
			sudo apt-get install git
			
			因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。
	
				$ git config --global user.name "Your Name"
				$ git config --global user.email "email@example.com"


	2.创建版本库

			创建一个版本库非常简单，首先，选择一个合适的地方，创建一个空目录：

				$ mkdir learngit
				$ cd learngit
				$ pwd
				/Users/michael/learngit


				$ git init
				Initialized empty Git repository in /Users/michael/learngit/.git/

			如果你没有看到.git目录，那是因为这个目录默认是隐藏的，用ls -ah命令就可以看见。

			在目录下新建一个readme.txt,编写内容：
				Git is a version control system.
				Git is free software.



				$ git add readme.txt

				$ git commit -m "wrote a readme file"
				[master (root-commit) cb926e7] wrote a readme file
				 1 file changed, 2 insertions(+)	
				 create mode 100644 readme.txt


			小结

				现在总结一下今天学的两点内容：

				初始化一个Git仓库，使用git init命令。

				添加文件到Git仓库，分两步：

    					第一步，使用命令git add <file>，注意，可反复多次使用，添加多个文件；

   					第二步，使用命令git commit，完成。




二、时光机穿梭
			git status命令可以让我们时刻掌握仓库当前的状态；
				$ git status
			git diff命令：虽然Git告诉我们readme.txt被修改了，但如果能看看具体修改了什么内容，自然是很好的。
				比如你休假两周从国外回来，第一天上班时，已经记不清上次怎么修改的readme.txt，所以，需要用git diff这个命令看看
				$ git diff readme.txt 

			小结

			    	要随时掌握工作区的状态，使用git status命令。

    				如果git status告诉你有文件被修改过，用git diff可以查看修改内容。

	1.版本回退
			小结

				现在总结一下：

				    HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。

				    穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。

				    要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。


	2.工作区和暂存区
			小结
				git add命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行git commit就可以一次性把暂存区的所有修改提交到分支。

	3.管理修改
			小结
				Git是对于文件的跟踪修改的，每次修改，如果不add到暂存区，那就不会加入到commit中。

	4.撤销修改	
			小结
					现在是凌晨两点，你正在赶一份工作报告，你在readme.txt中添加了一行				
							My stupid boss still prefers SVN.

						在你准备提交前，一杯咖啡起了作用，你猛然发现了“stupid boss”可能会让你丢掉这个月的奖金！

						既然错误发现得很及时，就可以很容易地纠正它。你可以删掉最后一行，手动把文件恢复到上一个版本的状态。

					git checkout -- file可以丢弃工作区的修改

					$ git checkout -- readme.txt

						命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：

						一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；

						一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。

						总之，就是让这个文件回到最近一次git commit或git add时的状态。
				
				注意：git checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到git checkout命令

					现在假定是凌晨3点，你不但写了一些胡话，还git add到暂存区了，但是还未commit：
							My stupid boss still prefers SVN.

							$ git add readme.txt

					命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区：	
							$ git reset HEAD readme.txt
					在丢弃工作区的修改：
							$ git checkout -- readme.txt
					整个世界终于清静了！

					现在，假设你不但改错了东西，还从暂存区提交到了版本库，怎么办呢？还记得版本回退一节吗？可以回退到上一个版本。
					不过，这是有条件的，就是你还没有把自己的本地版本库推送到远程。还记得Git是分布式版本控制系统吗？
					我们后面会讲到远程版本库，一旦你把“stupid boss”提交推送到远程版本库，你就真的惨了……


					小结

						又到了小结时间。

						场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

						场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。

						场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。




	5.删除文件

			一般情况下，你通常直接在文件管理器中把没用的文件删了，或者用rm命令删了：
				$ git add test.txt
				$ git commit -m "add test.txt"
				[master 94cdc44] add test.txt
				 1 file changed, 1 insertion(+)
				 create mode 100644 test.txt
				$ rm test.txt			# 删除工作区的test.txt, 但是因为add和commit过了，所以暂存区和版本库中还存在


			
			现在你有两个选择，一是确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit：

				$ git rm test.txt
				rm 'test.txt'
				$ git commit -m "remove test.txt"
				[master d17efd8] remove test.txt
				 1 file changed, 1 deletion(-)
				 delete mode 100644 test.txt

			现在，文件就从版本库中被删除了。

			另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：

				$ git checkout -- test.txt

			git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。



三、远程仓库---Github
			将Git本地库和GitHub仓库同步
			
			由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以，需要一点设置：	
					第1步：创建SSH Key。
						$ ssh-keygen -t rsa -C "youremail@example.com"
						你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。
					
					第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：

						然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容
						点“Add Key”，你就应该看到已经添加的Key

	1.添加远程库
			小结

				要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；

				关联后，使用命令git push -u origin master第一次推送master分支的所有内容；

				此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；

				分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！

				当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！

					

	2.从远程库克隆
			小结

				要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。

				Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快

				VMAF：	git@github.com:Netflix/vmaf.git
					
					https://github.com/Netflix/vmaf.git
			


				
四、分支管理
			分支就是科幻电影里面的平行宇宙，当你正在电脑前努力学习Git的时候，另一个你正在另一个平行宇宙里努力学习SVN。

			如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过，在某个时间点，两个平行宇宙合并了，结果，你既学会了Git又学会了SVN！
	
	1.创建与合并分支

			小结

				Git鼓励大量使用分支：

				查看分支：git branch

				创建分支：git branch <name>		

				切换分支：git checkout <name>

				创建+切换分支：git checkout -b <name>

				合并某分支到当前分支：git merge <name>

				删除分支：git branch -d <name>

	2.解决冲突
			冲突的体现：分支和master上的修改不同，然后需要合并分支的时候，就会产生冲突了。

			合并的时候不管在分支还是master都是可以的。例如在分支解决冲突并且成功合并后，回到master的时候，他们的readme.txt文件的内容依旧是不同步的。
			这时候需要在master上在进行操作：$ git merge dev3 ，此时会成功合并主分支，然后再去看readme.txt时，就会发现内容与分支修改的结果匹配了。
			最后，删除分支，完成操作。

			小结

				当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。

				用git log --graph命令可以看到分支合并图。	指令：$ git log --graph --pretty=oneline --abbrev-commit



	3.分支管理策略
			小结

				Git分支十分强大，在团队开发中应该充分应用。

				合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。

				指令：$ git merge --no-ff -m "merge with no-ff" dev
				

	4.BUG分支
			小结

				修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；

				当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。

				你可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令：

					指令：$ git stash apply stash@{0}


				注意：修复bug时，最好也是创建一个类似issue-101的分支去干活，然后合并，再删除分支。



	5.Feature分支

			小结

				开发一个新feature，最好新建一个分支；

				如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。

			
	6.多人协作

			小结

				    查看远程库信息，使用git remote -v；

				    本地新建的分支如果不推送到远程，对其他人就是不可见的；

				    从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；

				    在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；

				    建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；

				    从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。

			
五、标签管理
		1.创建标签
				小结

				    命令git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit id；

				    git tag -a <tagname> -m "blablabla..."可以指定标签信息；

				    git tag -s <tagname> -m "blablabla..."可以用PGP签名标签；

				    命令git tag可以查看所有标签。

		2.操作标签
				小结

				    命令git push origin <tagname>可以推送一个本地标签；

				    命令git push origin --tags可以推送全部未推送过的本地标签；

				    命令git tag -d <tagname>可以删除一个本地标签；

				    命令git push origin :refs/tags/<tagname>可以删除一个远程标签。



六、使用GitHub
			一定要从自己的账号下clone仓库，这样你才能推送修改。如果从bootstrap的作者的仓库地址git@github.com:twbs/bootstrap.git克隆，因为没有权限，你将不能推送修改。

			小结

			    在GitHub上，可以任意Fork开源仓库；

			    自己拥有Fork后的仓库的读写权限；

			    可以推送pull request给官方仓库来贡献代码。


七、自定义Git	https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001375234012342f90be1fc4d81446c967bbdc19e7c03d3000
		


				
